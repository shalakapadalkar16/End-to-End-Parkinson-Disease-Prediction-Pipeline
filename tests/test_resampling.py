# -*- coding: utf-8 -*-
"""test_resampling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QSrruPOtuk3-iM0GM2KUPeHp8WDRTgnb
"""

import unittest
import pandas as pd
import os
from resampling import *

class TestResampling(unittest.TestCase):
    def setUp(self):
        # Create a sample dataset for testing
        self.test_data = pd.DataFrame({
            'ENROLL_AGE': [45, 55, 65, 75, 85, 65, 75, 85, 65, 75],
            'OTHER_COLUMN': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']
        })
        self.test_file = 'test_data.csv'
        self.test_data.to_csv(self.test_file, index=False)

    def test_age_group_assignment(self):
        # Test age group categorization
        data = pd.read_csv(self.test_file)
        data['Age_Group'] = pd.cut(data['ENROLL_AGE'],
                                 bins=[0, 50, 60, 70, 80, 100],
                                 labels=['Under 50', '50-59', '60-69', '70-79', '80 and above'],
                                 right=False)

        # Check if age groups are correctly assigned
        self.assertEqual(data[data['ENROLL_AGE'] == 45]['Age_Group'].iloc[0], 'Under 50')
        self.assertEqual(data[data['ENROLL_AGE'] == 55]['Age_Group'].iloc[0], '50-59')
        self.assertEqual(data[data['ENROLL_AGE'] == 65]['Age_Group'].iloc[0], '60-69')
        self.assertEqual(data[data['ENROLL_AGE'] == 75]['Age_Group'].iloc[0], '70-79')
        self.assertEqual(data[data['ENROLL_AGE'] == 85]['Age_Group'].iloc[0], '80 and above')

    def test_resampling_balance(self):
        # Test if resampling maintains target size
        data = pd.read_csv(self.test_file)
        data['Age_Group'] = pd.cut(data['ENROLL_AGE'],
                                 bins=[0, 50, 60, 70, 80, 100],
                                 labels=['Under 50', '50-59', '60-69', '70-79', '80 and above'],
                                 right=False)

        age_group_counts = data['Age_Group'].value_counts().sort_index()
        target_size = age_group_counts['70-79']

        # Test undersampling
        under_sampled = data[data['Age_Group'] == '60-69'].sample(n=target_size, random_state=1)
        self.assertEqual(len(under_sampled), target_size)

        # Test oversampling
        over_sampled = data[data['Age_Group'] == '80 and above'].sample(
            n=target_size, replace=True, random_state=1)
        self.assertEqual(len(over_sampled), target_size)

    def test_output_file_creation(self):
        # Test if output file is created
        data = pd.read_csv(self.test_file)
        data['Age_Group'] = pd.cut(data['ENROLL_AGE'],
                                 bins=[0, 50, 60, 70, 80, 100],
                                 labels=['Under 50', '50-59', '60-69', '70-79', '80 and above'],
                                 right=False)

        output_file = 'data_modified.csv'
        data.to_csv(output_file, index=False)
        self.assertTrue(os.path.exists(output_file))

    def tearDown(self):
        # Clean up test files
        if os.path.exists(self.test_file):
            os.remove(self.test_file)
        if os.path.exists('data_modified.csv'):
            os.remove('data_modified.csv')

if __name__ == '__main__':
    unittest.main()